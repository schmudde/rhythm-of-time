{:use-macros {sel1 dommy.core, sel dommy.core}, :excludes #{}, :name rhythm-of-time.controls, :imports nil, :requires {dommy dommy.core, dommy.core dommy.core, seq rhythm-of-time.sequencer, rhythm-of-time.sequencer rhythm-of-time.sequencer, reader cljs.reader, cljs.reader cljs.reader}, :uses nil, :defs {volume-update {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :line 10, :column 7, :end-line 10, :end-column 20, :arglists (quote ([]))}, :name rhythm-of-time.controls/volume-update, :variadic false, :file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, tempo-update {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :line 14, :column 7, :end-line 14, :end-column 19, :arglists (quote ([tempo-slider]))}, :name rhythm-of-time.controls/tempo-update, :variadic false, :file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :end-column 19, :method-params ([tempo-slider]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tempo-slider]))}, slider-defaults! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :line 22, :column 7, :end-line 22, :end-column 23, :arglists (quote ([slider value]))}, :name rhythm-of-time.controls/slider-defaults!, :variadic false, :file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :end-column 23, :method-params ([slider value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([slider value]))}, tempo-defaults! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :line 27, :column 7, :end-line 27, :end-column 22, :arglists (quote ([tempo-slider]))}, :name rhythm-of-time.controls/tempo-defaults!, :variadic false, :file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :end-column 22, :method-params ([tempo-slider]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tempo-slider]))}, sound-toggle {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :line 32, :column 7, :end-line 32, :end-column 19, :arglists (quote ([]))}, :name rhythm-of-time.controls/sound-toggle, :variadic false, :file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reset-sequencer {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :line 42, :column 7, :end-line 42, :end-column 22, :arglists (quote ([name]))}, :name rhythm-of-time.controls/reset-sequencer, :variadic false, :file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :end-column 22, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, toggle-sequencer! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :line 46, :column 7, :end-line 46, :end-column 24, :arglists (quote ([]))}, :name rhythm-of-time.controls/toggle-sequencer!, :variadic false, :file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, melody {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :line 55, :column 7, :end-line 55, :end-column 13, :arglists (quote ([melody-select]))}, :name rhythm-of-time.controls/melody, :variadic false, :file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/controls.cljs", :end-column 13, :method-params ([melody-select]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([melody-select]))}}, :require-macros {dommy dommy.core, dommy.core dommy.core}, :cljs.analyzer/constants {:seen #{:volume :click :touchend :change}, :order [:volume :click :touchend :change]}, :doc nil}