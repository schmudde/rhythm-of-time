{:use-macros nil, :excludes #{}, :name rhythm-of-time.sequencer, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware, reader cljs.reader, cljs.reader cljs.reader, synth rhythm-of-time.synthesizer, rhythm-of-time.synthesizer rhythm-of-time.synthesizer}, :uses nil, :defs {melody {:name rhythm-of-time.sequencer/melody, :file "src/rhythm_of_time/sequencer.cljs", :line 11, :column 1, :end-line 11, :end-column 12, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 11, :column 6, :end-line 11, :end-column 12}}, draw-state {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 212, :column 7, :end-line 212, :end-column 17, :arglists (quote ([state]))}, :name rhythm-of-time.sequencer/draw-state, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, update-state {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 111, :column 7, :end-line 111, :end-column 19, :arglists (quote ([state]))}, :name rhythm-of-time.sequencer/update-state, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-stroke! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 159, :column 7, :end-line 159, :end-column 19, :arglists (quote ([weight green blue x y width height]))}, :name rhythm-of-time.sequencer/draw-stroke!, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 19, :method-params ([weight green blue x y width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 7, :fn-var true, :arglists (quote ([weight green blue x y width height]))}, get-tempo-track-names {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 31, :column 7, :end-line 31, :end-column 28, :arglists (quote ([]))}, :name rhythm-of-time.sequencer/get-tempo-track-names, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, sequencer {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 230, :column 14, :end-line 230, :end-column 23, :export true, :arglists (quote ([]))}, :name rhythm-of-time.sequencer/sequencer, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, seq-defaults {:name rhythm-of-time.sequencer/seq-defaults, :file "src/rhythm_of_time/sequencer.cljs", :line 41, :column 1, :end-line 41, :end-column 18, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 41, :column 6, :end-line 41, :end-column 18}}, audio-defaults {:name rhythm-of-time.sequencer/audio-defaults, :file "src/rhythm_of_time/sequencer.cljs", :line 74, :column 1, :end-line 74, :end-column 20, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 74, :column 6, :end-line 74, :end-column 20}}, gain-value {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 194, :column 7, :end-line 194, :end-column 17, :arglists (quote ([audio-on-off]))}, :name rhythm-of-time.sequencer/gain-value, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 17, :method-params ([audio-on-off]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([audio-on-off]))}, advance? {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 89, :column 7, :end-line 89, :end-column 15, :arglists (quote ([tempo]))}, :name rhythm-of-time.sequencer/advance?, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 15, :method-params ([tempo]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tempo]))}, reset-defaults! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 56, :column 7, :end-line 56, :end-column 22, :arglists (quote ([name]))}, :name rhythm-of-time.sequencer/reset-defaults!, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 22, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, tempo-id-trk2 {:name rhythm-of-time.sequencer/tempo-id-trk2, :file "src/rhythm_of_time/sequencer.cljs", :line 29, :column 1, :end-line 29, :end-column 19, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 29, :column 6, :end-line 29, :end-column 19}}, frame-rate-scaler {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 82, :column 7, :end-line 82, :end-column 24, :arglists (quote ([tempo]))}, :name rhythm-of-time.sequencer/frame-rate-scaler, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 24, :method-params ([tempo]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tempo]))}, tempo-id-trk1 {:name rhythm-of-time.sequencer/tempo-id-trk1, :file "src/rhythm_of_time/sequencer.cljs", :line 28, :column 1, :end-line 28, :end-column 19, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 28, :column 6, :end-line 28, :end-column 19}}, one-note {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 192, :column 7, :end-line 192, :end-column 15, :arglists (quote ([]))}, :name rhythm-of-time.sequencer/one-note, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, set-synth! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 199, :column 7, :end-line 199, :end-column 17, :arglists (quote ([synth-select]))}, :name rhythm-of-time.sequencer/set-synth!, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 17, :method-params ([synth-select]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([synth-select]))}, draw-stage! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 165, :column 7, :end-line 165, :end-column 18, :arglists (quote ([stage position-x position-y]))}, :name rhythm-of-time.sequencer/draw-stage!, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 18, :method-params ([stage position-x position-y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 3, :fn-var true, :arglists (quote ([stage position-x position-y]))}, set-melody! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 13, :column 7, :end-line 13, :end-column 18, :arglists (quote ([melody-select]))}, :name rhythm-of-time.sequencer/set-melody!, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 18, :method-params ([melody-select]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([melody-select]))}, browser-detection {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 190, :column 7, :end-line 190, :end-column 24, :arglists (quote ([]))}, :name rhythm-of-time.sequencer/browser-detection, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, setup {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 61, :column 7, :end-line 61, :end-column 12, :arglists (quote ([]))}, :name rhythm-of-time.sequencer/setup, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-tempo {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 34, :column 7, :end-line 34, :end-column 19, :arglists (quote ([name tempo-track tempo]))}, :name rhythm-of-time.sequencer/update-tempo, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 19, :method-params ([name tempo-track tempo]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name tempo-track tempo]))}, get-melody {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 19, :column 7, :end-line 19, :end-column 17, :arglists (quote ([]))}, :name rhythm-of-time.sequencer/get-melody, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-defaults {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 54, :column 7, :end-line 54, :end-column 19, :arglists (quote ([]))}, :name rhythm-of-time.sequencer/get-defaults, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, stage-value {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 147, :column 7, :end-line 147, :end-column 18, :arglists (quote ([stage-state]))}, :name rhythm-of-time.sequencer/stage-value, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 18, :method-params ([stage-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stage-state]))}, advancer {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 99, :column 7, :end-line 99, :end-column 15, :arglists (quote ([stages frequency-list-i frequency-list-ii tempo]))}, :name rhythm-of-time.sequencer/advancer, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 15, :method-params ([stages frequency-list-i frequency-list-ii tempo]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 4, :fn-var true, :arglists (quote ([stages frequency-list-i frequency-list-ii tempo]))}, select-fill-color {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 151, :column 7, :end-line 151, :end-column 24, :arglists (quote ([]))}, :name rhythm-of-time.sequencer/select-fill-color, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, synth-type {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/sequencer.cljs", :line 205, :column 7, :end-line 205, :end-column 17, :arglists (quote ([]))}, :name rhythm-of-time.sequencer/synth-type, :variadic false, :file "src/rhythm_of_time/sequencer.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:fn :stages :frequencies-i-2 :stage :track2 :frequencies-i-1 :frequency-i :audio1 :frequencies-ii-2 :rgb :settings :update :size :volume :setup :middleware :synth :host :audio2 :stages2 :track1 :host-id :no-start :frequency-ii :audio :draw :frequencies-ii-1}, :order [:track1 :track2 :stages :frequencies-i-2 :frequencies-i-1 :audio1 :frequencies-ii-2 :audio2 :stages2 :frequencies-ii-1 :rgb :volume :synth :stage :frequency-i :frequency-ii :audio :host :settings :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}