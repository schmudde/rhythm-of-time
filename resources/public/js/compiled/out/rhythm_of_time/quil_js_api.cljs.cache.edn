{:use-macros nil, :excludes #{}, :name rhythm-of-time.quil-js-api, :imports nil, :requires {q quil.core, quil.core quil.core}, :uses nil, :defs {melody {:name rhythm-of-time.quil-js-api/melody, :file "src/rhythm_of_time/quil_js_api.cljs", :line 23, :column 1, :end-line 23, :end-column 12, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 23, :column 6, :end-line 23, :end-column 12}}, stop-loop {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 55, :column 16, :end-line 55, :end-column 25, :export true, :arglists (quote ([name]))}, :name rhythm-of-time.quil-js-api/stop-loop, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 25, :method-params ([name]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, get-sketch-state-by-id {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 38, :column 7, :end-line 38, :end-column 29, :arglists (quote ([name]))}, :name rhythm-of-time.quil-js-api/get-sketch-state-by-id, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 29, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, seq-defaults {:name rhythm-of-time.quil-js-api/seq-defaults, :file "src/rhythm_of_time/quil_js_api.cljs", :line 10, :column 1, :end-line 10, :end-column 18, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 10, :column 6, :end-line 10, :end-column 18}}, start-loop {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 61, :column 16, :end-line 61, :end-column 26, :export true, :arglists (quote ([name]))}, :name rhythm-of-time.quil-js-api/start-loop, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 26, :method-params ([name]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, start-loop! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 58, :column 16, :end-line 58, :end-column 27, :export true, :arglists (quote ([name]))}, :name rhythm-of-time.quil-js-api/start-loop!, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 27, :method-params ([name]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, get-sketch-by-id {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 35, :column 7, :end-line 35, :end-column 23, :arglists (quote ([name]))}, :name rhythm-of-time.quil-js-api/get-sketch-by-id, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 23, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, stop-loop! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 51, :column 16, :end-line 51, :end-column 26, :export true, :arglists (quote ([name]))}, :name rhythm-of-time.quil-js-api/stop-loop!, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 26, :method-params ([name]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, state-js {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 41, :column 16, :end-line 41, :end-column 24, :export true, :arglists (quote ([name]))}, :name rhythm-of-time.quil-js-api/state-js, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 24, :method-params ([name]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, tempo-id-trk2 {:name rhythm-of-time.quil-js-api/tempo-id-trk2, :file "src/rhythm_of_time/quil_js_api.cljs", :line 8, :column 1, :end-line 8, :end-column 19, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 8, :column 6, :end-line 8, :end-column 19}}, tempo-id-trk1 {:name rhythm-of-time.quil-js-api/tempo-id-trk1, :file "src/rhythm_of_time/quil_js_api.cljs", :line 7, :column 1, :end-line 7, :end-column 19, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 7, :column 6, :end-line 7, :end-column 19}}, set-melody! {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([melody-select]))}, :name rhythm-of-time.quil-js-api/set-melody!, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 18, :method-params ([melody-select]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([melody-select]))}, update-tempo {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 68, :column 7, :end-line 68, :end-column 19, :arglists (quote ([name tempo-track tempo]))}, :name rhythm-of-time.quil-js-api/update-tempo, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 19, :method-params ([name tempo-track tempo]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name tempo-track tempo]))}, get-melody {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 31, :column 7, :end-line 31, :end-column 17, :arglists (quote ([]))}, :name rhythm-of-time.quil-js-api/get-melody, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-defaults {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([]))}, :name rhythm-of-time.quil-js-api/get-defaults, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reset-state {:protocol-inline nil, :meta {:file "/Users/schmudde/work/code/rhythm-of-time/src/rhythm_of_time/quil_js_api.cljs", :line 45, :column 16, :end-line 45, :end-column 27, :export true, :arglists (quote ([name]))}, :name rhythm-of-time.quil-js-api/reset-state, :variadic false, :file "src/rhythm_of_time/quil_js_api.cljs", :end-column 27, :method-params ([name]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:stages :frequencies-i-2 :track2 :frequencies-i-1 :audio1 :frequencies-ii-2 :audio2 :stages2 :track1 :frequencies-ii-1}, :order [:stages :frequencies-i-2 :frequencies-i-1 :audio1 :frequencies-ii-2 :audio2 :stages2 :frequencies-ii-1 :track1 :track2]}, :doc nil}